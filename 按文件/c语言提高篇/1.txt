1.计算机程序=代码+数据
    ①代码+数据（运行后）=结果
    从宏观上理解，代码就是动作，就是加工数据的动作，数据就是数字，就是被代码
	加工的东西
	②冯诺依曼：数据和代码放在一起
	  哈佛结构：数据和代码分开
	  代码：函数
	  数据：全局变量，局部变量
	在单片机中，把程序代码烧到flash，然后程序在flash中原地运行，程序中涉及的
	数据(全局变量和局部变量)必须在SRAM，这是哈佛结构。
	③数据在程序中表现为全局变量和局部变量(在gcc中，常量也在内存中)，大部分
	单片机常量在flash。数据结构和算法都跟数据有关，离不开内存。
	④如何管理内存
	操作系统，将系统分为一块一块(一块一般为4k)。操作系统给我们提供了内存管理
	的接口，只需要用API即可管理内存。
	譬如在c语言使用malloc free这些接口来管理内存。
	没有操作系统，自己计算内存的使用和安排
	c语言中。我们通过编译器提供的变量名来访问内存，如果需要大块内存，也可以
	使用API(malloc free)来访问系统内存
	c++语言中，使用new来创建对象(分配内存)，delete来删除对象(释放内存)。
	Java/C#不直接操作内存，用虚拟机来操作内存。
2.从逻辑角度，内存实际上是由无限个内存单元组成，每个单元有唯一的地址为内存地址
   ，内存单元(一个字节)和地址一一对应。实际并不是无限，32位地址线，内存最大为
   4G。
     内存芯片是可以并联的，即使8位内存芯片也可以做出16位，32位的硬件内存
	①位(1bit),字节(8bit),半字(一般是16bit),字(一般是32bit)
3.内存编址和寻址，内存对齐
    ①内存编址
	内存编址是以字节为单位的
	②内存和数据类型的关系
	C语言的基本数据类型:char short int long float double
	int 整型(整型体现在它与CPU数据位宽一样)32位CPU，整型就是32位
	在32位系统中变量最好定义int，因为效率最高
	③内存对齐
	从硬件角度，32位内存单元0 1 2 3四个单元本身有相关性，这四个字节组合起来
	当作一个int硬件上更合适，效率高。
	对齐访问很配合硬件，效率高，非对齐访问(2 3 4 5)与硬件本身不搭配，效率低
	但是硬件也能提供非对齐访问，但是效率低
5.C语言如何操作内存
    ①用变量名来访问内存
	  int a;//申请了四个字节(单元)
	  可以定义不同类型的数据来确定数据占的内存大小(即几个连续地址的内存单元)
	  函数就是一段代码的封装，函数名就是一段代码的首地址。本质也是一个内存地址
	②用指针间接访问内存
	  指针全名指针变量
	③用数组管理内存，和变量一样
	  int a;//编译器分配四个字节给a，并把首地址和符号a绑定起来
	  int b[10];//编译器分配四个字节给b，并把首地址首地址和符号b绑定起来
6.内存管理之结构体
    数据结构意义：数据字内存中如何排布，如何加工
	最简单的数据结构:数组
	数组:类型相同，意义相关的变量用数组管理
	①结构体(元素类型可以不相同)
	例如：
	struct people
	{
	int age;
	char name[];
	}
	struct people peop;
	
	