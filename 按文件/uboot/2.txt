1.shell介绍
shell是操作系统的终端命令行
shell可以理解为软件系统提供给用户操作的命令行界面，可以说他是人机交互的一种方式
shell脚本//执行很多的命令，写在shell脚本
shell是一类编程语言
    编写shell脚本时使用的语言就是shell语言，又叫脚本语言
	常用的shell语言:sh,bash,csh,ksh,python
	linux下常用的脚本语言，sh，bash
2.shell的编写
shell是在linux下运行的，shell程序中换行符是\n。而Windows下是\r\n，因此Windows下编写
的shell不能再linux下运行
shell程序的运行方法
    ①./xx.sh   需要设置文件权限  chmod a+x xx.sh
	②source xx.sh
	③bash xx.sh
	第一行:#!/bin/sh    路径
	dash是ubuntu中默认使用的脚本解释器
	脚本注释:#
3.shell编程学习
     shell(弱语言)脚本变量没有类型，直接定义即可
	 变量的定义:
	 string="hello world"
	 echo $string
	 常用的转义字符
	 常用的转义字符
     反斜杠(\):使用反斜杠后面的一个变量变为单纯的字符串
     单引号(‘’):转义其中的所有的变量为单纯的字符串
     双赢和(“”):保留其中的变量属性，不进行转义处理
     反引号(``)：把其中的命令执行返回结果
	 注：条件测试语句和流程控制语句输出输入重定向等见其他文件
	 if判断语句也表示逻辑或[ 10 -eq 10 -o "abc"="abc" ]
	 
	 i=$(($i+1))  //括号不能少，两层括号
4.Makefile的补充
    作用:
	工程中C文件太多，因此用makefile做项目管理，方便编译连接过程
	组成:目标，依赖，命令
	目标:最终生成的东西
	依赖:用来生成目录的原材料
	命令:加工的方法
	①%通配符和makefile的自动推导规则 
	%代表一个或者几个字母
	自动推导
	②Makefile中定义和使用变量(与shell相似)
	③伪目标(.PHONY)
	意思是这个目标本身不代表一个文件，执行这个目标只是为了单纯执行这个目标下的命令
	例如:clean
	伪目标一般没有依赖，伪目标可以用 .PHONY声明。例如.PHONY clean。
	④Makefile的文件名
	Makefile和makefile均可以
	⑤Makefile中引用Makefile
	在主Makefile引用(用include)其他Makefile
5.Makefile的补充2
    ①注释使用#
	②命令前面的@用来静默执行
	Makefile执行一行命令默认情况先打印这行命令，在执行。如果不行打印这行命令，在命令前加@
	③Makefile的赋值语句
	?= 如果前面已经定义变量切赋值则忽略这行，否则执行这行(即未被定义)
	+= 给已经定义的变量接续内容(在shell，Makefile，可以认为所以的变量都是字符串)，但是注意中间有个
	空格隔开
	:= 一般也用作赋值 被解析就地直接解析
	= 最简单的赋值   被解析是是按照最后一次变量的赋值
	A=123
	B=$A456                          B:=$A456
	A=abc
	echo $B
	abc456                           123456
	④Makefile环境变量
	用export导出普通变量就是环境变量，一般环境变量用大写，普通变量用小写
	环境变量可以当做当前工程所有Makefile可以使用，普通变量只有此Makefile文件可用。
	make时传给Makefile的变量优先级是最高的。可以覆盖文件中定义的。
6.Makefile的补充3
    ①通配符(和shell一样)
	*若干个任意字符
	?一个任意字符
    []将[]内的字符依次匹配：例如[123]
	(%只用于规则通配符)
	②Makefile的自动变量
	常用的自动变量(有时候文件集合下文件特别多)
	$@  规则的目标文件名
	$<  规则的依赖文件名(只有第一个)如果依赖目标是以模式（即"%"）定义的，
	那么"$<"将是符合模式的一系列的文件集。注意，其是一个一个取出来的。
	$^  规则的依赖文件集合
    