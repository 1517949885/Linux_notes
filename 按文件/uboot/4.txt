1.uboot的Makefile分析
   ①uboot version确定(24-29)
      uboot的版本号分为四个级别
	  VERSION  主版本号
	  PATCHLEVEL 此版本号
	  SUBLEVEL  再次版本号
	  EXTRAVERSION  另外附加的信息
	  用.分隔开形成最终的配置版本号
	  U_BOOT_VERSION 最终形成的变量，这个变量记录了Makefile的版本号
	  include/version_autogenerated.h文件是编译过程生成的文件，里面的内容是一个宏定义
	  宏定义的值是uboot的配置版本号
	②两个环境变量，HOSTARCH和HOSTOS (用export导出的是环境变量)
	  $(shell pwd) 和 `pwd`  一样
	  HOSTARCH:主机架构 HOST 主机，开发用的电脑 arch 架构的缩写 uname -m查看
	  HOSTOS 主机系统  uname -s查看
	③静默编译(50-54)
	  平时编译会打印出很多编译信息，静默编译不希望看到这些信息
	  make -s     -s会传给Makefile
	④两种编译方法(56-76行注释，实现代码78-123)
	  默认情况下，当前文件夹.c文件编译出来的.o文件会放在同一文件夹(原地编译)，但是原地编译污染了本身
	  的文件夹
	  单独输出文件夹编译:在编译时，另外指定一个输出目录，生成的.o或其他文件在输出目录
	  两种方式:1.make O=输出目录2.先导出环境变量export BUILD_DIR=/tmp/build然后make
	  如果两个都指定，	O=优先
	  make O=output/ distclean
	  make O=output/ x210_sd_config   //需要在output文件夹建立需要的文件夹
	  make O=output/ all
	  (代码可能有问题，编译出错)
	  四个环境变量:
	  OBJTREE:编译生成的.o文件存放目录的根目录，默认编译目录是当前目录
	  SRCTRCC:源代码的根目录，当前目录
	  默认编译以上路径相同 
	  TOPDIR
	  LNDIR
	  
	  MKCONFIG:Makefile中定义的一个变量，代表源码根目录mkconfig文件(101行)
	  
	⑤include $(obj)include/config.mk
	  include/config.mk不是源码自带的，是在make x210_sd_config配置过程中自动生成的。
      config.mk(一个脚本)里面是一些配置，这些配置值来自2589行的配置项，想要改正配置值可以
      去2589行去改。ARCH CPU BOARD VENDOR SOC
    ⑥接下来的两个重要的环境变量
      ARCH:	上述配置的值，意义是当前编译的目标CPU的架构，他的值会影响CROSS_COMPILE环境变量的值
	  CROSS_COMPILE定义交叉编译工具链的前缀，后面用这些前缀加上后缀定义编译过程用到的各种工具链
	  的工具。(136-182)
	  实际运用是可以改变CROSS_COMPILE，也可以编译时make CROSS_COMPILE=xxx来实现
	⑦include $(TOPDIR)/config.mk  导入文件，  主目录下
	  config.mk （97-104）编译工具定义
	  112 autoconfig.mk 是配置过程生成的，用来指导整个uboot编译的过程，这些宏会影响编译走向(条件编译)
	      配置过程需要原材料产生，原材料在源码目录include/configs/xxx.h（本开发板x210_sd.h,内容全部为
		  宏定义，每个开发板对应一个头文件）
	  142-149
	  链接脚本:如果定义了CONFIG_NAND_U_BOOT(在生成的autoconfig.mk文件中查看)则链接脚本叫u_boot_nand.lds
	  否则定义了u_boot.lds,我们使用的210是inand。
      156-158
	  TEXT_BASE:在Makefile配置开发板时,在board/samsung/x210下生成config.mk,其中的内容就是TEXT_BASE
	  TEXT_BASE是将来整个uboot链接时链接地址，uboot使用了地址映射C3E00000地址等于
	  0x23E00000
	  239-256
	  自动推导规则
2.uboot的配置过程
    ①mkconfig脚本的6个参数
	$(@:_config=) arm s5pc11x x210 samsung s5pc110
	x210_sd_config的_config替换成空。得到第一个参数x210_sd
	$1 x210_sd  $2 arm $3 s5pc11x $4 x210 $5 samsung $6 s5pc110  $# 6
	第23行
	[ "${BOARD_NAME}" ] || BOARD_NAME="$1"  判断BOARD_NAME是否为空，为空则赋值。BOARD_NAME=x210_sd
	25,26行
	传参不符合返回1，退出，传参只能是4,5,6
	33-118 创建符号链接   ln -s 源文件  目标文件
	这些符号链接文件夹主要作用是给头文件包含等过程提供指向性连接
	1.在include下创建asm，指向asm-$2
	2.在include/arm-$2下创建arch文件，指向include/arm-$2/arch-$6
	  if [ -z $6 -o $6="NULL" ]  -o相当于或 	||	
	3.在include下创建regs.h文件，指向$6.h
	4.删除第二部的文件，在include/arm-$2下创建arch文件，指向include/arm-$2/arch-$3
	5.在include/asm-$2/下创建proc，指向include/asm-$2/proc-armv
	123-129
	创建include/config.mk,为了让主makefile的133行包含
	134-结束
	创建或追加 include/config.h
	这个文件就一行#include <configs/x210_sd.h>
	x210_sd.h会生成一个autoconfig.mk文件，这个文件会被主Makefile引入，这里面的宏会影响
	大部分.c文件的条件编译
3.uboot的链接脚本
    

	   
	  
	  
	  