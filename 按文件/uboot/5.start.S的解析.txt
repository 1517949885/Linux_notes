1.start.S的引入
   在c语言中，整个项目的入口就是main函数
   在uboot中因为有汇编阶段参与，不能直接找main.c，整个程序的入口取决于链接脚本中的ENTRY声明的地方
   ENTRY(_start),_start所在处的代码就是整个程序的起始代码，在start.S中
2.start.S的解析
   头文件包含
   config.h（Makefile配置过程生成的文件，在执行mkconfig生成），这个文件只包含了一个头文件
   #include<configs/x210_sd.h>  //include文件夹下config文件夹下的x210_sd.h
   start.S包含的第一个头文件就是#include<configs/x210_sd.h>(uboot的配置文件，很多宏)
   version.h中包含了include/version_autogenerated.h,这个编译产生，是版本号
   #include <asm/proc/domain.h>，asm目录是配置时创建的符号链接，实际指向asm-arm
   为了可移植性，start.S源代码中头文件用的都是符号链接，这样源代码就不需要改了，只需要不同硬件移植时配置
   不同，创建的符号链接指向不同，就具有了可移植性
   proc也是符号链接，是proc-arm，相当于asm-arm/proc-arm/domain.h，如果没有符号链接，则
   会编译出错，找不到头文件。
3.start.S的解析2
   #if defined(CONFIG_EVT1) && !defined(CONFIG_FUSED)
	.word 0x2000
	.word 0x0
	.word 0x0
	.word 0x0
   #endif
   启动代码的16字节校验头(USB启动不需要，SD卡需要，mkv210image.C文件会生成)
   uboot这里start.S文件在开头位置放置了16个字节的填充。
   ①异常向量表
    _start: b	reset
	ldr	pc, _undefined_instruction
	ldr	pc, _software_interrupt
	ldr	pc, _prefetch_abort
	ldr	pc, _data_abort
	ldr	pc, _not_used
	ldr	pc, _irq
	ldr	pc, _fiq
	异常向量表是硬件决定的，软件只是参照硬件的设计来实现
	.balignl 16,0xdeadbeef  伪指令，这句话是让当前地址对齐排布，如果不对齐，自动向后走地址知道对齐，用
	0xdeadbeef填充
	②TEXT_BASE(100行)
	makekfile配置阶段的TEXT_BASE,uboot的链接地址，0XC3E00000
4.start.S的解析3
    CFG_PHY_UBOOT_BASE 33e00000  uboot在ddr的物理地址
	复位第一句
	//默认就是SVC模式，uboot一直在SVC模式。
	msr	cpsr_c, #0xd3		@ I & F disable, Mode: 0x13 - SVC，//禁止FIQ,IRQ，ARM状态，SVC模式
	整个uboot时CPU一直在SVC模式。
	中间有段没有用
	bl	disable_l2cache  //禁止l2cache
	bl	set_l2cache_auxctrl_cycle  //初始化
	bl	enable_l2cache  //使能
	。。。。
	。。。。
	上面五步都是和cache和MMU有关的，不用细看
	225-227
	ldr	r0, =PRO_ID_BASE
    ldr	r1, [r0,#OMR_OFFSET]
    bic	r2, r1, #0xffffffc1
	在210中有一个寄存器(E0000004),这个寄存器的值是硬件根据OM的引脚设置的值，反应OM的接法，也就是启动介质
	243-264
	cmp	r2, #0x0		@ 512B 4-cycle
	moveq	r3, #BOOT_NAND

	cmp	r2, #0x2		@ 2KB 5-cycle
	moveq	r3, #BOOT_NAND

	cmp	r2, #0x4		@ 4KB 5-cycle	8-bit ECC
	moveq	r3, #BOOT_NAND

	cmp	r2, #0x6		@ 4KB 5-cycle	16-bit ECC
	moveq	r3, #BOOT_NAND

	cmp	r2, #0x8		@ OneNAND Mux
	moveq	r3, #BOOT_ONENAND

	/* SD/MMC BOOT */
	cmp     r2, #0xc
	moveq   r3, #BOOT_MMCSD	

	/* NOR BOOT */
	cmp     r2, #0x14
	moveq   r3, #BOOT_NOR
	r2不同值代表什么启动
	284-286
	第一次设置栈，在SRAM中设置的。栈的地址为0xd0036000   //在被调用的函数中还要再次调用函数。lr只有一个，
	//所以需要设置栈
5.start.S的解析4
    288行
    bl	lowlevel_init	/* go setup pll,mux,memory */
    这里的lowlevel_init在board/samsumg/x210中
	第一句push	{lr}   压栈
	①检查复位状态:复杂CPU允许很多复位情况   //冷上电，热启动(类似于电脑待机)，睡眠下的唤醒
	//冷上电需要初始化DDR，热启动和睡眠下唤醒不需要
	②IO的恢复
	③关闭看门狗
	④一些SRAM和SROM的初始化  //我们可以不用管
	⑤供电锁存，100-104，110行后有意义
	⑥110-115   判断当前代码执行的位置(在DDR还是ISRAM),是否跳过时钟初始化和内存初始化，低功耗唤醒在DDR中
	(uboot的BL1在ISRAM和DDR都有，冷启动iSRAM启动)
	当前代码在DDR中，时钟，DDR不用初始化，在iSRAM需要初始化时钟、DDR
	ldr	r0, =0xff000fff
	bic	r1, pc, r0		/* r0 <- current base addr of code */  r1=pc&(~r0)
	ldr	r2, _TEXT_BASE		/* r1 <- original base addr in ram */链接地址加载到r2
	bic	r2, r2, r0		/* r0 <- current base addr of code */  r2=r2&(~r0)
	cmp     r1, r2                  /* compare r0, r1                  */
	beq     1f			/* r0 == r1 then skip sdram init   */
	1f  1表示跳转到1  f往下找   b往回找
	注:
	adr r0 _start   //加载_start当前运行地址
	ldr r0 _start   //加载_start链接地址
    ⑦system_clock_init  初始化时钟   205-385行
	   x210_sd.h  300-428决定时钟怎么配置。
	⑧mem_ctrl_asm_init   初始化DDR
	函数位置在uboot/cpu/s5pc11x/s5pc110/cpu_init.S
	初始化DDR的代码与裸机的代码类似，不一样的是DMC0_MEMCONFIG_0在逻辑中是0x20e01323,在uboot中是0x30F01313
	在裸机中DCM0的256M内存地址范围是0x20000000-0x2fffffff
	在uboot中DCM0的256M内存地址范围是0x30000000-0x3fffffff
	可以通过软件配置DCM0的起始地址(我们硬件接在DCM0的是256M)
	宏定义在x210_sd.h的438-468
	⑨uart_asm_init   初始化串口  本文件的415-432行
	串口打印"O"
	⑩tzpc_init   127行
	  pop {pc}  返回
	  返回前，串口打印“K”
	  lowlevel_init执行完会打印出来OK
6.start.S的解析7	
    ①292-294行
     又一次供电锁存，无意义
    ②297-299行
     第二次设置栈，在SDRAM中设置栈(DDR已经被初始化过了)，第一次是在SRAM设置的栈
	 ldr	sp, _TEXT_PHY_BASE	/* setup temp stack pointer */   33e00000   ARM的栈是满减栈，与uboot代码
	 //地址一样，不过代码向上，栈是满减
	 sub	sp, sp, #12
	 mov	fp, #0	
	 ③判断在哪运行  305-310，是否执行代码重定位。(将uboot的第二部分(全部)加载到DDR)
	 ldr	r0, =0xff000fff
	 bic	r1, pc, r0		/* r0 <- current base addr of code */
	 ldr	r2, _TEXT_BASE		/* r1 <- original base addr in ram */
	 bic	r2, r2, r0		/* r0 <- current base addr of code */
	 cmp     r1, r2                  /* compare r0, r1                  */
	 beq     after_copy		/* r0 == r1 then skip flash copy   */
	 ④312-355  重定位
	 ldr	r0, =0xD0037488
	 ldr	r1, [r0]
	 ldr	r2, =0xEB200000
	 cmp	r1, r2
	 beq     mmcsd_boot
	 D0037488  在SRAM中，这个地址的值是被硬件自动设置的，硬件根据SD卡在哪个通道，会将这个地址设置为
	 相应的数字SD0:eb000000   SD2:EB200000
	 在260行确认怎么确定，在278行写入了一个寄存器	
	 ldr	r0, =INF_REG_BASE
	 str	r3, [r0, #INF_REG3_OFFSET] 
	 正真的重定位是movi_bl2_copy，是个C文件，在uboot/cpu/s5pc11x/movi.c  //复制代码
	 copy_bl2(2, MOVI_BL2_POS, MOVI_BL2_BLKCNT,CFG_PHY_UBOOT_BASE, 0);
	 第一个参数表示通道2，第二个参数是uboot第二部分在SD卡中开始的扇区，第三部分是UBOOT的大小
	 第四部分是SDRAM的地址
7.start.S的解析9 
     虚拟地址映射
     物理地址:物理设备生产时赋予的地址，裸机中寄存器地址都是物理地址,物理地址是确定好的
     虚拟地址:在软件操作和硬件被操作之间增加一个层，虚拟地址映射层。软件操作给虚拟地址，硬件操作还是
     原来的物理地址，映射层建立一个软件层到硬件层的映射表
     MMU单元的作用
     MMU:内存管理单元,SOC的一个硬件单元，主要功能是实现虚拟地址到物理地址的映射。
	 MMU单元在CP15协处理器中进行控制，要控制MMU单元，就是对协处理的寄存器进行操做
	 地址映射的额外收益1:访问控制
	 访问控制就是:在管理上对内存进行分块，然后每块进行独立的虚拟地址映射，然后在每一块
	 的映射关系中同事还实现了访问控制(对该块可读、可写、只读、只写、不可访问等控制)
	 2:cache
	 cache的工作和虚拟地址映射的关系
	 cache是快速缓存，比CPU慢，比DDR快。
	 ①CP15一共有16个寄存器。通过mcr,mrc来控制寄存器
	   c3寄存器在mmc中的作用是控制域访问   362-363
	   ldr	r5, =0x0000ffff
	   mcr	p15, 0, r5, c3, c0, 0		@load domain access register
	 ②设置TTB(c2寄存器)(translation table base),转换表基地址
	   转换表是建立一套虚拟地址映射的关键。
	   转换表由表索引(虚拟地址)和表项(物理地址)组成。映射中规定了内存映射和管理是以
	   块为单位的，看MMU的支持和选择，在ARM中支持三种块大小，细表1k，粗表4k,段1M。
	   正真的转换表就是由若干个换换表单元构成，每个单元负责1个内存块。
	 ③使能MMU(c1寄存器)
	 ④转换表的分析   (lowlevel_init.S   593行)
	   从宏观上上来看，整个转换表可以看做是一个int类型的数组，数组中的元素值就是表项，
	   数组下标就是表索引。
	   ARM的段是映射长度为1M，因此一个映射单元只能管1M。
	   本开发板的映射表
	   VA(虚拟地址)                    PA(物理地址)
	   0-0x10000000                    0-0x10000000                    256M
	   0x10000000-0x20000000           0                               256M   不被允许
	   0x20000000-0x60000000           0x20000000-0x60000000           1G     0.5-1.5G
	   0x60000000-0x80000000           0                               512M   1.5-2G
	   0x80000000-0xb0000000           0x80000000-0xb0000000           768M   2-2.75G
	   0xb0000000-0xc0000000           0xb0000000-0xb0000000           256M   2.75-3G
	   0xc0000000-0xd0000000           0x30000000-0x40000000           256M   3-3.25G
	   0xd0000000-完                   0xd0000000-0x完                 768M   3.25-4G
	   
	   
	   DDR
	   DCM0:0x30000000-0x3FFFFFFF
	   DCM1:0x40000000-0x4FFFFFFF
7.start.S的解析10
    第三次设置栈(DDR中设置栈)
	ldr	sp, =(CFG_UBOOT_BASE + CFG_UBOOT_SIZE - 0x1000)，在uboot上方
	清理bss段
	第一段结束
	ldr	pc, _start_armboot
	start_armboot在uboot/lib_arm/board.c中，是c文件，这个函数是uboot的第二阶段，这
	句代码的作用是实际上就是一个远跳转直接跳到DDR中的第二阶段开始地址处。是第一阶段和
	第二阶段的分界线。
	  
	
	
	